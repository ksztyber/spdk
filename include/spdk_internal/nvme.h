/* SPDX-License-Identifier: BSD-3-Clause
 * Copyright (c) 2024 Intel Corporation.  All rights reserved.
 */

#ifndef SPDK_INTERNAL_NVME_H
#define SPDK_INTERNAL_NVME_H

#include "spdk/keyring.h"
#include "spdk/nvme.h"
#include "spdk/nvmf_spec.h"
#include "spdk/stdinc.h"

/**
 * Calculate a response to a DH-HMAC-CHAP challenge.
 *
 * \param key DH-HMAC-CHAP key.
 * \param hash Hash function to use.
 * \param type Challenge type ("HostHost" for host challenge or "Controller" for controller
 * challenge).
 * \param seq Sequence number.
 * \param tid Transaction ID.
 * \param scc Secure channel concatenation.
 * \param nqn1 Host/Subsystem NQN, depending on challenge type (hostnqn for host challenge,
 * subnqn for controller challange).
 * \param nqn2 The other NQN (if nqn1==hostnqn, then nqn2==subnqn).
 * \param dhkey Diffie-Hellman secret.
 * \param dhlen Size of `dhkey`.
 * \param cval Challenge value.  Its size must be large enough to keep a digest generated by `hash`
 * function (e.g. at least 32B for sha256, 48B for sha384, etc.).
 * \param rval Response buffer.  Its size must be large enough to keep a digest generated by `hash`
 * function (e.g. at least 32B for sha256, 48B for sha384, etc.).
 *
 * \return 0 on success, negative errno otherwise.
 */
int spdk_nvme_auth_calculate(struct spdk_key *key, enum spdk_nvmf_auth_hash hash,
			     const char *type, uint32_t seq, uint16_t tid, bool scc,
			     const char *nqn1, const char *nqn2, const void *dhkey, size_t dhlen,
			     const void *cval, void *rval);

#endif /* SPDK_INTERNAL_NVME_H */
